#!/bin/bash

# ----------------------------------------------------------------------------
# F U N C T I O N S
# ----------------------------------------------------------------------------

# BEGIN DUPLICATED ----------------------------------------------------------
#
# FIXME: ces fonctions sont les mêmes que dans le fichier sysconfig/common
#       Il faudrait trouver un moyen  de pouvoir faire un source du common
#       à partir de tous les scripts. Cela crée une dépendance un peut trop
#       forte dont je ne sais identifier l'impact. Du coup, je double le code.
#       Il faut penser à la mettre à jour partout.
#
#

if [ -x /usr/bin/logger ]
then
    LOGGER=/usr/bin/logger
elif [ -x /bin/logger ]
then
    LOGGER=/bin/logger
else
    LOGGER=/usr/bin/echo
fi


log () {

   msg="${1}"
   user="${LOGNAME}"

   # TODO : faire un mode debug
   # printf -- ${msg}
   /usr/bin/timeout 2 $LOGGER -p local0.notice \
      -t "opng" "${user}: ${msg}"

}

#
# Information
#
RESTORE='\e[0m'
RED='\e[31m'
GREEN='\e[38;5;64m'
YELLOW='\e[33m'
BLUE='\e[34m'


# implements: https://no-color.org/
NO_COLOR="${NO_COLOR:-}"
# Implements: https://bixense.com/clicolors/
CLICOLOR="${CLICOLOR:-1}"
CLICOLOR_FORCE="${CLICOLOR_FORCE:-0}"

if [ -n "${NO_COLOR}" ] \
    || [ "${CLICOLOR}" == "0" ] && tty -s && [ "${CLICOLOR_FORCE}" == "0" ]
then
    COLOR_CHAPTER=""
    COLOR_TITLE1=""
    COLOR_ERROR=""
    COLOR_INFO=""
    COLOR_ACTION=""
    COLOR_WARNING=""
    COLOR_TODO=""
    RESTORE=""
else

    COLOR_CHAPTER='\e[33;48;5;52m['
    COLOR_TITLE1='\e[7;49;37m['
    COLOR_ERROR=${RED}
    COLOR_INFO=${BLUE}
    COLOR_ACTION=${GREEN}
    COLOR_WARNING=${RED}
    COLOR_TODO=${BLUE}

fi





chapter  () {
    printf -- "${COLOR_CHAPTER}% 100s\r[#] %s${RESTORE}\n" " " "${*}"
}

title1  () {
    printf -- "${COLOR_TITLE1}% 100s\r |  %s${RESTORE}\n" " " "${*}"
}


error () {
    printf -- "${COLOR_ERROR}[-] %s${RESTORE} \n" "${*}"
    log "ERROR: ${1}"
}

warning () {
    printf -- "${COLOR_WARNING}[!]${RESTORE} %s\n" "${*}"
}

action () {
    printf -- "${COLOR_ACTION}[+] %s${RESTORE}\n" "${*}"
}


info () {
    printf -- "${COLOR_INFO} |->${RESTORE} %s\n" "${*}"
}

todo () {
    printf -- "${COLOR_TODO}[ ] TODO: %s${RESTORE}\n" "${*}"
}


# END DUPLICATED ----------------------------------------------------------


# arc en ciel 0 (rouge) => 100 (rouge)
#

value_to_rgb_arcenciel() {
    local value="$1"
    local interval="${2:-100}"
    local x=$(( value * 1530 / interval ))
    local r
    local g
    local b

    if [ $x -lt 255 ]
    then
        r=255
        g=$x
        b=0
    elif [ $x -lt 510 ]
    then
        r=$(( 510-x ))
        g=255
        b=0
    elif [ $x -lt 765 ]
    then
        r=0
        g=255
        b=$(( x-510 ))
    elif [ $x -lt 1020 ]
    then
        r=0;
        g=$(( 1020-x ))
        b=255
    elif [ $x -lt 1275 ]
    then
        r=$(( $x-1020 ))
        g=0
        b=255
    elif [ $x -le 1530 ]
    then
        r=255;
        g=0;
        b=$(( 1530-x ))
    fi

    printf -- "#%02x%02x%02x" "$r" "$g" "$b"
}


workload_to_level() {
    local work_load="$1"
    local level=0

    [ $work_load -le 100 ] && level=$(( work_load / 10 )) || level=11

    printf -- "%s" "$level"

}
workload_to_color() {

    local work_load=$1
    #value_to_rgb "$1" 1024

    if [ ${work_load} -eq 0 ]
    then
        color="#efefef"
    elif [ ${work_load} -lt 40 ]
    then
        color="#9be9a8"
    elif [ ${work_load} -lt 60 ]
    then
        color="#41b6c4"
    elif [ ${work_load} -lt 80 ]
    then
        color="#40c463"
    elif [ ${work_load} -le 100 ]
    then
        color="#216e39"
    else
        color="#217f39"
    fi

    printf -- "%s" "$color"

}

html_legend() {
    local legend="$1"
    local level="$2"
    cat <<EOF_DIV
    ${legend}
        <svg width="10" height="10" class="d-inline-block">
            <rect class="calendar-day" width="10" height="10" rx="2" ry="2" data-level="${level}"></rect>
        </svg>
EOF_DIV

}


html_color_legend () {
    local interval="${1:-100}"
    local v=0
    local level="$(workload_to_level "$v" "$interval" )"
    printf -- "<div id=\"legend\">\n"
    printf -- "Nb commit\n"
    html_legend "0" "$level"
    for v in 40 60 80 100
    do
        level="$(workload_to_level "$v" "$interval" )"
        html_legend "&lt;$v" "$level"
    done
    level="$(workload_to_level "$(( interval + 1 ))" "$interval" )"
    html_legend "&gt;$interval" "$level"
    printf -- "</div>\n"
}


html_svg_begin_div () {
    local div_id="$1"
    printf -- "<div id=\"%s\" class=\"current-heatmap-div\">\n" "${div_id}"
}

html_svg_end_div () {
    printf -- "</div>\n"
}



html_header() {
    local title="${1}"
    local branches="${2}"

cat <<EOF_HEADER
<!DOCTYPE html>
<html lang="fr" data-color-mode="auto" data-light-theme="light" data-dark-theme="dark">
  <head>
    <meta charset="utf-8">
    <style>

      * {
	    box-sizing: border-box;
	  }

      body {
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
          font-size: 12px;
      }

      .svg-tip {
          position: absolute;
          z-index: 99999;
          padding: 8px 16px;
          font-size: 12px;
          color: #ffffff;
          text-align: center;
          background: #24292f;
          border-radius: 6px;
      }

      .svg-tip::after {
          position: absolute;
          bottom: -9px;
          left: 50%;
          width: 5px;
          height: 5px;
          margin: 0 0 0 -5px;
          content: " ";
          border: 5px solid transparent;
          border-top-color: #24292f;
          border-bottom-left-radius: 6px;
          border-bottom-right-radius: 6px;
          border-top-left-radius: 6px;
          border-top-right-radius: 6px
      }

      .svg-tip-one-line {
          white-space: nowrap;
      }

      .calendar-day[data-level="0"] {
          fill: #efefef;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="1"] {
          fill: #9be9a8;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="2"] {
          fill: #9be9a8;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="3"] {
          fill: #9be9a8;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="4"] {
          fill: #9be9a8;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="5"] {
          fill: #40c463;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="6"] {
          fill: #40c463;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="7"] {
          fill: #30a14e;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="8"] {
          fill: #30a14e;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="9"] {
          fill: #216e39;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="10"] {
          fill: #216e39;
          opacity: .5;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }
      .calendar-day[data-level="11"] {
          fill: #216e39;
          opacity: .7;
          outline: 1px solid rgba(27,31,35, 0.06);
          shape-rendering: geometricPrecision;
          outline-offset: -1px;
      }

      .body {
          position: absolute;
          padding-top: 20px;
          padding-left: 100px;
          align: center;
      }
      .introduction {
          font-size: 14px;
      }
      .current-heatmap-title {
           font-size: 16px;
      }
      .current-heatmap-div {
	       margin: 10px;
		   padding-left: 10px;
	       border: 1px solid #d0d7de;
	       border-top-left-radius: 6px;
           border-top-right-radius: 6px;
      }
      .current-heatmap {
      }
    </style>


    <script type="text/javascript">
        function git_tip(obj, event, show) {
            var tip_box = document.getElementById("tip");
            if (!show) {
              tip_box.hidden = true;
            } else {
              var c_date=obj.getAttribute("data-date");
              var c_count=obj.getAttribute("data-count");

              tip_box.innerHTML = "<strong>" + c_count + " lignes de code modifiés</strong> le " + c_date;

              tip_box.hidden = false;
              tip_box.style.top  = event.clientY - tip_box.offsetHeight - 10 + "px";
              tip_box.style.left = event.clientX - (tip_box.offsetWidth / 2 ) + "px";
            }

        }

    </script>
  </head>
<body>

  <div id="tip" class="svg-tip svg-tip-one-line" style="pointer-events: none; top: 0px; left: 0px;" hidden="" >
  ::after
  </div>

  <div class="body">

    <div class="introduction">
        <h1>${title}</h1>
        <p><strong>Liste des branches traitées : </strong> ${branches} </p>
    </div>
    <div class="heatmap">
EOF_HEADER
}


html_footer() {
cat <<EOF_FOOTER
     </div> <!--  heatmap -->
    </div> <!--  body -->
  </body>
</html>
EOF_FOOTER
}



git_to_svg() {
    # TODO aouter le nombre de commiters et la liste (/!\ .mailmap)
    local year="$1"
    local branches="$2"
    local svg_fill="${3:-no}"

    cat <<EOF_SVG_HEADER
<svg width="722" height="150" class="js-calendar-graph-svg">
  <g transform="translate(10, 50)" class="current-heartmap">

EOF_SVG_HEADER

    translate=-1
    x=14

    local total_nb_commits=0
    local total_nb_files=0

    for d in $(seq 0 364 )
    do
        the_date=$(date --date="$year-1-1 00:00 $d day" "+%Y-%m-%d")
        next_day=$(date --date="${the_date} 00:00 1 day" "+%Y-%m-%d")
        the_day=$(date  --date="${the_date} 00:00" "+%u")
        y=$(( ( ( the_day - 1 ) % 13 ) * 13 ))

        work_load=0
        for b in ${branches//,/ }
        do
            for stats  in $(git log --shortstat --after="${the_date}" --before="${next_day}" "$b" | egrep 'file.* changed' | awk '{ print $1"-"$4"-"$6}')
            do
                nb_files=${stats/-*}
                nb_ins=${stats##-*}
                nb_ins=${nb_ins/-*}
                nb_del=${stats##*-}
                [ -z "${nb_del}" ] && nb_del=0

                work_load=$(( work_load + nb_files + nb_ins + nb_del ))
                total_nb_commits=$(( total_nb_commits + 1 ))
                total_nb_files=$(( total_nb_files + 1 ))

            done
        done

        if [ ${translate} -eq -1 ]
        then
            translate=0
            echo '<g transform="translate(0, 0)">'
        else
            if [ ${the_day} -eq 1 ]
            then
                echo '<g transform="translate('${translate}', 0)">'
            fi
        fi

        # TODO: ajouter le nombre de fichier modifiés, de lignes impactés, de commiteurs
        level="$(workload_to_level $work_load)"
        if [ "${svg_fill}" == "yes" ]
        then
            fill="fill=\"$(workload_to_color "${work_load}")\""
        else
            fill=""
        fi
        cat <<EOF_RECT
    <rect class="calendar-day" width="10" height="10" x="${x}" y="${y}" ${fill} data-count="${work_load}" data-date="${the_date}" data-level="${level}" onmouseover="git_tip(this, event, true);" onmouseout="git_tip(this, event, false);" />
EOF_RECT

        if [ ${the_day} -eq 7 ]
        then
            echo "</g>"
            x=$(( x - 1 ))
            translate=$(( translate + 14 ))
        fi
    done

    if [ ${the_day} -ne 7 ]
    then
        echo "</g>"
    fi
    x=14
    for m in $(seq 1 12 )
    do
        the_month=$(date --date="${year}-${m}-1" "+%b")
        echo '    <text x="'"${x}"'" y="-7" class="month">'"${the_month}"'</text>'
        x=$(( x + 60 ))
    done


    cat <<EOF_FOOT
    <text text-anchor="start" class="wday" dx="-10" dy="8" >Lun.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="22" style="display: none;">Mar.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="32">Mer.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="48" style="display: none;">Jeu.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="57">Ven.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="73" style="display: none;">Sam.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="81">Dim.</text>
  </g>
  <text x="10" y="20" class="current-heatmap-title" >
	  [ ${year} ]  ${total_nb_commits} contributions  and  ${total_nb_files} files modified
  </text>
</svg>
EOF_FOOT

    return "${total_nb_commits}"

}


# -------------------------------------------------------------------------
#   Variables
#

id=""
title="Git Heatmap"
branches=""
svg_only="no"
svg_fill="no"
aggregate="no"
years="$(date +%Y)"
all_in_one="no"
output_dir="/dev/shm/git_heatmap"


# -------------------------------------------------------------------------
usage () {

    cat <<EOF_HELP
GIT-HEATMAP(1)

NAME

        git-heatmap [--help|help] [--color-legend |
                 [--all-in-one-html]
                 [--output-dir DIR_FOR_MULTI_FILES]
                 [--years YYYY,[AAAA,BBBB]]
                 [--aggregate]
                 [--svg-only]
                 [--svg-fill]
                 [--id <string_id>]
                 [--title <string>]
                 [branch1,[branch2,...]
             ]

    --help|help                           : this help

    --id                                  : An id used to identifiy the results.
                                            The id must be a string in [A-Za-z-_]* format.
                                            The id is used in html title dans put files name.

    --title                               : Set html page title. Default is "$title"

    --color-legend                        : display only the color legend (for debug)

    --all-in-one-html                     : If many branches or provides, add all svg in one file
                                            and all is send on stdout

    --svg-only                            : Only generate svg. Default is "${svg_only}"

    --svg-fill                            : Fill svg instead of using css coloration.
                                            Usefull with --svg-only to insert svg in other web page.
                                            Default is "${svg_fill}"

    --output-dir                          : Creates one file by year in DIR_FOR_MULTI_FILES dir.
                                            Default is "${output_dir}"

    --years                               : All years in YYYY format separated by ','.
                                            If not set, the current year is used.

    --aggregate                           : In case of many branches, make a graphe with the sum
                                            off all branches. Dafault is "${aggregate}"

    branch1,[branch2,...]]                : All the branches to check separated by ','.
                                            Default is current branch.
EXAMPLE

    # Current year activity for current branch.
    git heatmap > /dev/shm/somefile.html
    firefox /dev/shm/somefile.html

EOF_HELP
    exit 0
}



# -------------------------------------------------------------------------
#   Check parameters
#

while [ $# -gt 0 ]
do
    case "$1" in
        "--help"|"help")
            usage
            exit 0
            ;;
        "--years")
            [ -n "${branches}" ] && { error "--year must set before branches"; usage; exit 1; }
            [ -z "$2" ] && { error "--year needs parameter"; usage; exit 1; }
            #TODO: check string format YYYYMMDD
            years="$2"
            shift
            ;;
        "--output-dir")
            # TODO; Check value.
            output_dir="$2";
            shift
            ;;
        "--color-legend")
            color_legend
            exit 0
            ;;
        "--all-in-one-html")
            all_in_one="yes"
            ;;
        "--aggregate")
            aggregate="yes"
            ;;
        "--svg-only")
            svg_only="yes"
            ;;
        "--svg-fill")
            svg_fill="yes"
            ;;
        "--id")
            # TODO: check id format
            id="$2"
            shift
            ;;
        "--title")
            # TODO: check id format
            title="$2"
            shift
            ;;
        *)
            branches="$1"
            ;;
    esac
    shift
done


# If no brach set, get current one
# git git >= 2.22 git branch --show-current
[ -z "${branches}" ] && branches="$(git rev-parse --abbrev-ref HEAD)"

# output prefix used for output files
[ -n "${id}" ] && output_prefix="${id}-" || output_prefix=""


# -------------------------------------------------------------------------
#   Main
#



if [ "${all_in_one}" == "yes" ]
then
    # [*] Add all svg graphs in on file
    if [ "${svg_only}" == "yes" ]
    then
        for y in ${years//,/ }
        do
            git_to_svg "$y" "$branches" "${svg_fill}"
        done
    else
        html_header "${title}" "${branches}"
        html_color_legend
        for y in ${years//,/ }
        do
            html_svg_begin_div "${output_prefix}${y}"
            git_to_svg "$y" "$branches" "${svg_fill}"
            html_svg_end_div
        done
        html_footer
    fi

else
    # [*] Creates one file by year in $output_dir
    [ ! -d "${output_dir}" ] && mkdir -p "${output_dir}"
    if [ "${svg_only}" == "yes" ]
    then
        for y in ${years//,/ }
        do
            output_filename="${output_dir}/${output_prefix}${y}.html"
            git_to_svg "$y" "$branches" > "${output_filename}" "${svg_fill}"
        done
    else
        for y in ${years//,/ }
        do
            output_filename="${output_dir}/${output_prefix}${y}.html"
            info "${output_filename}"

            html_header "${title}" "${branches}" > "${output_filename}"
            html_color_legend >> "${output_filename}"
            html_svg_begin_div "${output_prefix}${y}" >> "${output_filename}"
            git_to_svg "$y" "$branches"  "${svg_fill}" >> "${output_filename}"
            html_svg_end_div
            html_footer >> "${output_filename}"
        done
    fi
fi

