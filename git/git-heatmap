#!/usr/bin/bash
# vim: ts=4 sw=4 expandtab
#
# ----------------------------------------------------------------------------
# F U N C T I O N S
# ----------------------------------------------------------------------------

# BEGIN DUPLICATED ----------------------------------------------------------
#
# FIXME: ces fonctions sont les mêmes que dans le fichier sysconfig/common
#       Il faudrait trouver un moyen  de pouvoir faire un source du common
#       à partir de tous les scripts. Cela crée une dépendance un peut trop
#       forte dont je ne sais identifier l'impact. Du coup, je double le code.
#       Il faut penser à la mettre à jour partout.
#
#

if [ -x /usr/bin/logger ]
then
    LOGGER=/usr/bin/logger
elif [ -x /bin/logger ]
then
    LOGGER=/bin/logger
else
    LOGGER=/usr/bin/echo
fi


log () {

   msg="${1}"
   user="${LOGNAME}"

   # TODO : faire un mode debug
   # printf -- ${msg}
   /usr/bin/timeout 2 $LOGGER -p local0.notice \
      -t "opng" "${user}: ${msg}"

}

#
# Information
#
RESTORE='\e[0m'
RED='\e[31m'
GREEN='\e[38;5;64m'
YELLOW='\e[33m'
BLUE='\e[34m'


# implements: https://no-color.org/
NO_COLOR="${NO_COLOR:-}"
# Implements: https://bixense.com/clicolors/
CLICOLOR="${CLICOLOR:-1}"
CLICOLOR_FORCE="${CLICOLOR_FORCE:-0}"

if [ -n "${NO_COLOR}" ] \
    || [ "${CLICOLOR}" == "0" ] && tty -s && [ "${CLICOLOR_FORCE}" == "0" ]
then
    COLOR_CHAPTER=""
    COLOR_TITLE1=""
    COLOR_ERROR=""
    COLOR_INFO=""
    COLOR_ACTION=""
    COLOR_WARNING=""
    COLOR_TODO=""
    RESTORE=""
else

    COLOR_CHAPTER='\e[33;48;5;52m['
    COLOR_TITLE1='\e[7;49;37m['
    COLOR_ERROR=${RED}
    COLOR_INFO=${BLUE}
    COLOR_ACTION=${GREEN}
    COLOR_WARNING=${RED}
    COLOR_TODO=${BLUE}

fi





chapter  () {
    printf -- "${COLOR_CHAPTER}% 100s\r[#] %s${RESTORE}\n" " " "${*}"
}

title1  () {
    printf -- "${COLOR_TITLE1}% 100s\r |  %s${RESTORE}\n" " " "${*}"
}


error () {
    printf -- "${COLOR_ERROR}[-] %s${RESTORE} \n" "${*}"
    log "ERROR: ${1}"
}

warning () {
    printf -- "${COLOR_WARNING}[!]${RESTORE} %s\n" "${*}"
}

action () {
    printf -- "${COLOR_ACTION}[+] %s${RESTORE}\n" "${*}"
}


info () {
    printf -- "${COLOR_INFO} |->${RESTORE} %s\n" "${*}"
}

todo () {
    printf -- "${COLOR_TODO}[ ] TODO: %s${RESTORE}\n" "${*}"
}


# END DUPLICATED ----------------------------------------------------------


# arc en ciel 0 (rouge) => 100 (rouge)
#
# return colors  based on input value taken in an interval.
#
value_to_rgb_arcenciel() {
    local value="$1"
    local interval="${2:-100}"
    local x=$(( value * 1530 / interval ))
    local r
    local g
    local b

    if [ $x -lt 255 ]
    then
        r=255
        g=$x
        b=0
    elif [ $x -lt 510 ]
    then
        r=$(( 510-x ))
        g=255
        b=0
    elif [ $x -lt 765 ]
    then
        r=0
        g=255
        b=$(( x-510 ))
    elif [ $x -lt 1020 ]
    then
        r=0;
        g=$(( 1020-x ))
        b=255
    elif [ $x -lt 1275 ]
    then
        r=$(( $x-1020 ))
        g=0
        b=255
    elif [ $x -le 1530 ]
    then
        r=255;
        g=0;
        b=$(( 1530-x ))
    fi

    printf -- "#%02x%02x%02x" "$r" "$g" "$b"
}

# returns level associates to input value
#
workload_to_level() {
    local work_load="$1"
    local level=0

    if [ $work_load -eq 0 ]; then
		level=0
    elif [ $work_load -lt 10 ]; then
		level=10
    elif [ $work_load -lt 100 ]; then
		level=$(( (work_load / 10 ) * 10 ))
		(( work_load % 10 )) || level=$(( level + 10 ))
    elif [ $work_load -lt 500 ]; then
		 level=500
	else
		level=10000
	fi
    printf -- "%s" "$level"

}

level_to_color () {
    local level="$1"
    local color

    if (( level == 0 )); then
        color="#efefef"
    elif (( level <= 100 )); then
        color=$(( 255 - level ))
        color="$(printf -- "#00%02x00" "$color")"
    elif (( level == 500 )) ;then
        color="#00aa00"
    else
        color="#009900"
    fi

    printf -- "%s" "$color"
}

# returns color associates to input value
#
workload_to_color() {

    local work_load=$1
    #value_to_rgb "$1" 1024

    if [ ${work_load} -eq 0 ]
    then
        color="#efefef"
    elif [ ${work_load} -lt 10 ]
    then
        color="#82c4c6"
    elif [ ${work_load} -lt 20 ]
    then
        color="#82c4c6"
    elif [ ${work_load} -lt 30 ]
    then
        color="#87e990"
    elif [ ${work_load} -lt 40 ]
    then
        color="#7fdd4c"
    elif [ ${work_load} -lt 50 ]
    then
        color="#82c46c"
    elif [ ${work_load} -lt 60 ]
    then
        color="#22780f"
    elif [ ${work_load} -lt 70 ]
    then
        color="#148414"
    elif [ ${work_load} -lt 80 ]
    then
        color="#00561b"
    elif [ ${work_load} -lt 90 ]
    then
        color="#003300"
    elif [ ${work_load} -lt 100 ]
    then
        color="#003300"
    elif [ ${work_load} -lt 500 ]
    then
        color="#003300"
    else
        color="#550000"
    fi

    printf -- "%s" "$color"

}


# ---------------------------------------------------------------------------
#   HTML functions
# ---------------------------------------------------------------------------

# -- Display legend name and a colored svg square.
#
html_legend() {
    local legend="$1"
    local level="$2"
    cat <<EOF_DIV
    ${legend}
        <svg width="10" height="10" class="d-inline-block">
            <rect class="calendar-day" width="10" height="10" rx="2" ry="2" data-level="${level}"></rect>
        </svg>
EOF_DIV

}


# -- Display a div containing dolored legend for many values.
#
html_color_legend () {
    local interval="${1:-500}"
    local v=0
    local level="$(workload_to_level "$v")"
    printf -- "<div id=\"legend\">\n"
    printf -- "Nb commit\n"
    html_legend "0" "$level"
	for v in $(seq 9 10 99) 499
    do
		level="$(workload_to_level "$v" )"
		# Because value less then
		html_legend "&lt;$(( v + 1 ))" "$level"
    done
    level="$(workload_to_level "$interval" )"
    html_legend "&gt;=$interval" "$level"
    printf -- "</div>\n"
}

# -- Display the header of div containing a graph.
html_heatmap_graph_header () {
    local div_id="$1"
    printf -- "<div id=\"%s\" class=\"current-heatmap-div\">\n" "${div_id}"
}

# -- Display the footer of div containing a graph.
html_heatmap_graph_footer () {
    printf -- "</div>\n"
}


# -- Display html page header + begin of body
#
html_header() {
    local title="${1}"
    local branches="${2}"
    local css="${3}"
    local js="${4}"
cat <<EOF_HEADER
<!DOCTYPE html>
<html lang="fr" data-color-mode="auto" data-light-theme="light" data-dark-theme="dark">
  <head>
    <meta charset="utf-8">
    ${css}
    ${js}
  </head>
<body>

  <div id="tip" class="svg-tip svg-tip-one-line" style="pointer-events: none; top: 0px; left: 0px;" hidden="" >
  ::after
  </div>

  <div class="body">

    <div class="introduction">
        <h1>${title}</h1>
        <p><strong>Liste des branches traitées : </strong> ${branches} </p>
    </div>
    <div class="heatmap">
EOF_HEADER
}


# -- Display html page footer.

html_footer() {
cat <<EOF_FOOTER
     </div> <!--  heatmap -->
    </div> <!--  body -->
  </body>
</html>
EOF_FOOTER
}



# -- Display javascript.
# Default is sdtout used for iniline html.
#
html_js () {
    local js_filename
    [ -n "$1" ] && js_filename="${1}/heatmap.js" || js_filename=/dev/stdout

    cat > "${js_filename}"  <<EOF_JS
function git_tip(obj, event, show) {
    var tip_box = document.getElementById("tip");
    if (!show) {
      tip_box.hidden = true;
    } else {
      var c_date=obj.getAttribute("data-date");
      var c_count=obj.getAttribute("data-count");
      var c_workload=obj.getAttribute("data-workload");
      var c_contributors=obj.getAttribute("data-contributors");

      tip_box.innerHTML = "<strong>" + c_contributors + " contributeur(s) / " + c_count + " commit(0) / " + c_workload + " ligne(s) de code modifié(es)</strong> le " + c_date;

      tip_box.hidden = ( c_count == 0 ); // display only if there is data
      tip_box.style.top  = event.pageY - tip_box.offsetHeight - 10 + "px";
      tip_box.style.left = event.pageX - (tip_box.offsetWidth / 2 ) + "px";
  }

}
EOF_JS

}




# -- Display CSS.
# Default is sdtout used for iniline html.
#
html_css () {
    local css_filename
	local _color
	local _opacity
    [ -n "$1" ] && css_filename="${1}/heatmap.css" || css_filename=/dev/stdout

    cat > "${css_filename}"  <<EOF_CSS
* {
  box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";
    font-size: 12px;
}

.svg-tip {
    position: absolute;
    z-index: 99999;
    padding: 8px 16px;
    font-size: 12px;
    color: #ffffff;
    text-align: center;
    background: #24292f;
    border-radius: 6px;
}

.svg-tip::after {
    position: absolute;
    bottom: -9px;
    left: 50%;
    width: 5px;
    height: 5px;
    margin: 0 0 0 -5px;
    content: " ";
    border: 5px solid transparent;
    border-top-color: #24292f;
    border-bottom-left-radius: 6px;
    border-bottom-right-radius: 6px;
    border-top-left-radius: 6px;
    border-top-right-radius: 6px
}

.svg-tip-one-line {
    white-space: nowrap;
}

.body {
    position: absolute;
    padding-top: 20px;
    padding-left: 100px;
}
.introduction {
    font-size: 14px;
}
.current-heatmap-title {
     font-size: 16px;
}
.current-heatmap-div {
     margin: 10px;
     padding-left: 10px;
     border: 1px solid #d0d7de;
     border-top-left-radius: 6px;
     border-top-right-radius: 6px;
}
.current-heatmap {
}
EOF_CSS

for v in $(seq 0 10 100) 500 10000; do
	_color="$(level_to_color "$v")"
	if [ $v -eq 10 ]; then
		_opacity='.2'
	elif [ $v -eq 90 ]; then
		_opacity='.7'
	elif [ $v -eq 100 ]; then
		_opacity='.8'
	elif [ $v -gt 100 ]; then
		_opacity='1'
	else
		_opacity='.4'
	fi
    cat >> "${css_filename}"  <<EOF_COLOR
.calendar-day[data-level="$v"] {
    fill: ${_color};
    opacity: ${_opacity};
    outline: 1px solid rgba(27,31,35, 0.06);
    shape-rendering: geometricPrecision;
    outline-offset: -1px;
}
EOF_COLOR
done
}


#
# -- Returns all years from the first commit separated from ,.
git_all_years () {
    local branches="$1"
    local first_y="$(date +%Y)"
    local last_y="${first_y}"

    for b in ${branches//,/ }
    do
        first_c="$(git rev-list --max-parents=0 "${b}"|tail -1)"
        first_c_year="$( git show -s --format=%ci "${first_c}" | cut -d - -f1 )"
        [ "${first_c_year}" -lt "${first_y}" ] && first_y="${first_c_year}"
        last_c_year="$( git show -s --format=%ci "${b}" | cut -d - -f1 )"
        [ "${last_c_year}" -gt "${last_y}" ] && last_y="${last_c_year}"
    done

    seq "${last_y}" -1 "${first_y}" | tr ' ' ','

}



# -- Create svg heatmap graph from git logq
#
git_to_svg() {
    # TODO aouter le nombre de commiters et la liste (/!\ .mailmap)
    local year="$1"
    local branches="$2"
    local svg_fill="${3:-no}"

    cat <<EOF_SVG_HEADER
<svg width="722" height="150" class="js-calendar-graph-svg">
  <g transform="translate(10, 50)" class="current-heartmap">

EOF_SVG_HEADER

    local translate=-1
    local x=14

    local total_nb_commits=0
    local total_nb_files=0
    local total_nb_lines=0

	local total_contributors=0

    for d in $(seq 0 364 )
    do
        local commit_by_day=0
        local contributors_by_day=0
        the_date=$(date --date="$year-1-1 00:00 $d day" "+%Y-%m-%d")
        prev_day=$(date --date="${the_date} 23:59 1 day ago" "+%Y-%m-%d %H:%M")
        next_day=$(date --date="${the_date} 00:00 1 day" "+%Y-%m-%d %H:%M")
        the_day=$(date  --date="${the_date} 00:00" "+%u")
        y=$(( ( ( the_day - 1 ) % 13 ) * 13 ))

        work_load=0
        for b in ${branches//,/ }
        do
            for stats  in $(git log --shortstat --after="${prev_day}" --before="${next_day}" "$b" | grep -E 'file.* changed' | awk '{ print $1"-"$4"-"$6}')
            do
                nb_files=${stats/-*}
                nb_ins=${stats##-*}
                nb_ins=${nb_ins/-*}
                nb_del=${stats##*-}
                [ -z "${nb_del}" ] && nb_del=0

                work_load=$(( work_load + nb_files + nb_ins + nb_del ))
                total_nb_commits=$(( total_nb_commits + 1 ))
                commit_by_day=$(( commit_by_day + 1 ))

                total_nb_files=$(( total_nb_files + nb_files ))
                total_nb_lines=$(( total_nb_lines + nb_ins + nb_del ))

            done

            contributors_by_day=$(( contributors_by_day + $(git shortlog --summary --numbered --after="${prev_day}" --before="${next_day}" "$b" | wc -l) ))

        done

        if [ ${translate} -eq -1 ]
        then
            translate=0
            echo '<g transform="translate(0, 0)">'
        else
            if [ ${the_day} -eq 1 ]
            then
                echo '<g transform="translate('${translate}', 0)">'
            fi
        fi

        # TODO: ajouter le nombre de fichier modifiés, de lignes impactés, de commiteurs
        level="$(workload_to_level $work_load)"
        if [ "${svg_fill}" == "yes" ]
        then
            fill="fill=\"$(workload_to_color "${work_load}")\""
        else
            fill=""
        fi
        cat <<EOF_RECT
    <rect class="calendar-day" width="10" height="10" x="${x}" y="${y}" ${fill} data-count="${commit_by_day}" data-contributors="${contributors_by_day}" data-workload="${work_load}" data-date="${the_date}" data-level="${level}" onmouseover="git_tip(this, event, true);" onmouseout="git_tip(this, event, false);" />
EOF_RECT

        if [ ${the_day} -eq 7 ]
        then
            echo "</g>"
            x=$(( x - 1 ))
            translate=$(( translate + 14 ))
        fi
    done

    if [ ${the_day} -ne 7 ]
    then
        echo "</g>"
    fi
    x=14
    for m in $(seq 1 12 )
    do
        the_month=$(date --date="${year}-${m}-1" "+%b")
        echo '    <text x="'"${x}"'" y="-7" class="month">'"${the_month}"'</text>'
        x=$(( x + 60 ))
    done

	total_contributors="$(git shortlog --summary --numbered --after=$(( year - 1 )) --before=$(( year + 1 )) | wc -l)"

    cat <<EOF_FOOT
    <text text-anchor="start" class="wday" dx="-10" dy="8" >Lun.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="22" style="display: none;">Mar.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="32">Mer.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="48" style="display: none;">Jeu.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="57">Ven.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="73" style="display: none;">Sam.</text>
    <text text-anchor="start" class="wday" dx="-10" dy="81">Dim.</text>
  </g>
  <text x="10" y="20" class="current-heatmap-title" >
      [ ${year} ] &#x1F465 ${total_contributors} / ${total_nb_commits} contributions / ${total_nb_lines} lignes modifiées
  </text>
</svg>
EOF_FOOT

    return "${total_nb_commits}"

}

# -- Creates json heatmap data from git repo
#
git_to_json() {
    # TODO aouter le nombre de commiters et la liste (/!\ .mailmap)
    local year="$1"
    local branches="$2"
    local svg_fill="${3:-no}"

    local translate=-1
    local x=14

    local total_nb_commits=0
    local total_nb_files=0
	local total_nb_lines=0

	printf -- " { \"dates\": {\n"

    for d in $(seq 0 364 )
    do
        the_date=$(date --date="$year-1-1 00:00 $d day" "+%Y-%m-%d")
        prev_day=$(date --date="${the_date} 23:59 1 day ago" "+%Y-%m-%d %H:%M")
        next_day=$(date --date="${the_date} 00:00 1 day" "+%Y-%m-%d %H:%M")
        the_day=$(date  --date="${the_date} 00:00" "+%u")
        y=$(( ( ( the_day - 1 ) % 13 ) * 13 ))

        work_load=0
        for b in ${branches//,/ }
        do
            for stats  in $(git log --shortstat --after="${prev_day}" --before="${next_day}" "$b" | grep -E 'file.* changed' | awk '{ print $1"-"$4"-"$6}')
            do
                nb_files=${stats/-*}
                nb_ins=${stats##-*}
                nb_ins=${nb_ins/-*}
                nb_del=${stats##*-}
                [ -z "${nb_del}" ] && nb_del=0

                work_load=$(( work_load + nb_files + nb_ins + nb_del ))
                total_nb_commits=$(( total_nb_commits + 1 ))

                total_nb_files=$(( total_nb_files + nb_files ))
                total_nb_lines=$(( total_nb_lines + nb_ins + nb_del ))

            done
        done

        # TODO: ajouter le nombre de fichier modifiés, de lignes impactés, de commiteurs
        level="$(workload_to_level $work_load)"
        if [ "${svg_fill}" == "yes" ]
        then
            fill="\"fill\": \"$(workload_to_color "${work_load}")\","
        else
            fill=""
        fi
		[ "$d" == "364" ] && virg="" || virg=","
        cat <<EOF_LINE
		"${the_date}": { ${fill}"level": ${level}, "count": ${work_load} }$virg
EOF_LINE

    done

	cat <<EOF_FOOT
   },
  "title": "[ ${year} ]  ${total_nb_commits} contributions and ${total_nb_lines} lines modified"
}
EOF_FOOT

    return "${total_nb_commits}"

}

# -------------------------------------------------------------------------
#   Variables
#

id=""
title="Git Heatmap"
branches=""
svg_fill="no"
update_css="no"
update_graph="no"
update_js="no"
update_only="no"
aggregate="no"
inline_html="yes"
years="$(date +%Y)"
all_in_one="no"
user_output_filename=""
output_format="html"
fileext="html"

default_output_dir="/dev/shm/git_heatmap"
default_output_html_filename="${default_output_dir}/heatmap.html"
default_output_svg_filename="${default_output_dir}/heatmap.svg"

# -------------------------------------------------------------------------
usage () {

    cat <<EOF_HELP
GIT-HEATMAP(1)

NAME

        git-heatmap [--help|help]
                 [--all-in-one[=<filename>]]
                 [--aggregate]
                 [--color-legend]
                 [--id=<string_id>]
                 [--no-inline-html]
                 [--output-dir=DIR_FOR_MULTI_FILES]
                 [--svg-fill]
                 [--title=<string>]
                 [--update-css]
                 [--update-graph]
                 [--update-js]
                 [--years=[ all | YYYY,[AAAA,BBBB] ]
                 [branch1,[branch2,...]
             ]

    --help|help                           : this help

    --all-in-one                          : If many branches are provided, add all svg in one file
                                            and all is send on stdout.
                                            If a value is set, the value will be used for destinaton
                                            file. Default is "${default_output_html_filename}"
                                            Default is "${all_in_one}"

    --aggregate                           : In case of many branches, make a graphe with the sum
                                            off all branches. Dafault is "${aggregate}"

    --color-legend                        : display only the color legend (for debug)

    --json                                : Display in json format

    --id                                  : An id used to identifiy the results.
                                            The id must be a string in [A-Za-z-_]* format.
                                            The id is used in html title dans put files name.

    --no-inline-html                      : Css and js will be created in external files;
                                            Default is "${inline_html}"

    --output-dir                          : Creates one file by year in DIR_FOR_MULTI_FILES dir.
                                            Default is "${default_output_dir}"

    --svg-fill                            : Fill svg instead of using css coloration.
                                            Usefull with --update-graph to insert svg in other web page.
                                            Default is "${svg_fill}"

    --title                               : Set html page title. Default is "$title"

    --update-css                          : Update css file (see --inline-html doc)

    --update-graph                        : Only generate svg. Default is "${update_graph}".
                                            File will be created in "${default_output_svg_filename}"
                                            unless "--all-in-one" or "--outut-dir" params
                                            are used.

    --update-js                           : Update js  file (see --inline-html doc)


    --years                               : All years in YYYY format separated by ','.
                                            If not set, the current year is used.
                                            If set to "all", all the repo years will checked since
                                            the first commit.

    branch1,[branch2,...]]                : All the branches to check separated by ','.
                                            Default is current branch.
EXAMPLE

    # -- Current year activity for current branch in default dir.
    $ git heatmap
     |-> /dev/shm/git_heatmap/2021.html

    xdg-open /dev/shm/somefile.html

    # -- Create graphs for years 2021 and 2020
    $ git heatmap  --years=2021,2020
     |-> /dev/shm/git_heatmap/2021.html
     |-> /dev/shm/git_heatmap/2020.html

    # -- Years 2021 and 2020 in one file
    $ git heatmap  --years=2021,2020 --all-in-one
     |-> all in /dev/shm/git_heatmap/heatmap.html

    # -- Years 2021 and 2020 in one file
    $ git heatmap  --years=2021,2020 --all-in-one=/tmp/all.html
     |-> all in /tmp/all.html

    # -- Activities sinc the firt commit
    git heatmap --years=all --all-in-one --title="my repo name"
    |-> all in /dev/shm/git_heatmap/all.html
    xdg-open /dev/shm/git_heatmap/all.html

    # Create svg only in local dir
    $ git heatmap  --update-graph  --all-in-one=heatmap.html --years=2021,2020
    [+] Export svg
     |-> all in one file : heatmap.html
     |-> 2021
     |-> 2020

   # Creates all in /dev/shm/git-heatmap-all.html
   $ git heatmap  --all-in-one=/dev/shm/git-heatmap-all.html
   [+] Generate css and js
    |-> inline html
   [+] Generate html pages
    |-> all in /dev/shm/git-heatmap-all.html

   $ xdg-open /dev/shm/git-heatmap-all.html


EOF_HELP
    exit 0
}



# -------------------------------------------------------------------------
#   Check parameters
#

while [ $# -gt 0 ]
do
    case "$1" in
        "--help"|"help")
            usage
            exit 0
            ;;
        "--years="*)
            [ -n "${branches}" ] && { error "--year must set before branches"; usage; exit 1; }
            #TODO: check string format YYYYMMDD
            years="${1//*=/}"
            [ -z "$years" ] && { error "--years parameter needs value"; usage; exit 1; }
            ;;
        "--output-dir="*)
            # TODO; Check value.
            output_dir="${1//*=/}";
            [ -z "${output_dir}" ] && { error "--output-dir parameter needs value"; usage; exit 1; }
            ;;
        "--color-legend")
            color_legend
            exit 0
            ;;
        "--all-in-one")
            all_in_one="yes"
            ;;
        "--all-in-one="*)
            user_output_filename="${1//*=/}"
            [ -z "${user_output_filename}" ] && { error "--all-in-one= needs value"; usage; exit 1; }
            all_in_one="yes"
            ;;
        "--aggregate")
            aggregate="yes"
            ;;
        "--update-graph")
            update_graph="yes"
            update_only="yes"
            ;;
        "--svg-fill")
            svg_fill="yes"
            ;;
        "--id="*)
            # TODO: check id format
            id="${1//*=/}"
            [ -z "${id}" ] && { error "--id parameter needs value"; usage; exit 1; }
            ;;
        "--json")
            output_format="json"
			fileext="json"
            ;;
        "--title="*)
            # TODO: check id format
            title="${1//*=/}"
            [ -z "${title}" ] && { error "--title parameter needs value"; usage; exit 1; }
            ;;
        "--no-inline-html")
            inline_html="no"
            ;;
        "--update-css")
            update_css="yes"
            update_only="yes"
            ;;
        "--update-js")
            update_js="yes"
            update_only="yes"
            ;;
        "--"*)
            error "unknown parameter ${1}"
            usage
            exit 1
            ;;
        *)
            branches="$1"
            ;;
    esac
    shift
done


# If no brach set, get current one
# git git >= 2.22 git branch --show-current
[ -z "${branches}" ] && branches="$(git rev-parse --abbrev-ref HEAD)"

# output prefix used for output files
[ -n "${id}" ] && output_prefix="${id}-" || output_prefix=""

[ "${years}" == "all" ] && years="$(git_all_years "${branches}" )"

[ -z "${output_dir}" ] && output_dir="${default_output_dir}"
[ ! -d "${output_dir}" ] && mkdir -p "${output_dir}"

# -------------------------------------------------------------------------
#   Main
#

if [ "${update_css}" == "yes" ]
then
    info "css > ${output_dir}/heatmap.css"
    html_css "${output_dir}"
fi

if [ "${update_js}" == "yes" ]
then
    info "js > ${output_dir}/heatmap.js"
    html_js "${output_dir}"
fi

if [ "${update_graph}" == "yes" ]
then

    action "Export svg"

    if [ "${all_in_one}" == "yes" ]
    then
        [ -z "${user_output_filename}" ] \
            && output_filename="${default_output_svg_filename}" \
            || output_filename="${user_output_filename}"

        info "all in one file : ${output_filename}"

        > "${output_filename}"
        for y in ${years//,/ }
        do
            info "$y"
            git_to_svg "$y" "$branches" "${svg_fill}" >> "${output_filename}"
        done
    else
        info "output dir : ${output_dir}"
        for y in ${years//,/ }
        do
            output_filename="${output_dir}/${output_prefix}${y}.svg"
            > "${output_filename}"
            info "$y > ${output_filename}"
            git_to_svg "$y" "$branches" "${svg_fill}" >> "${output_filename}"
        done
    fi
fi


[ "${update_only}" == "yes" ] && exit 0



action "Generate css and js"
if [ "$inline_html" == "yes" ]
then
    info "inline html"
    html_css_header="<style>$( html_css )</style>"
    html_js_header=" <script type=\"text/javascript\">$( html_js )</script>"
else
    info "css > ${output_dir}/heatmap.css"
    html_css "${output_dir}"
    info "js  > ${output_dir}/heatmap.js"
    html_js "${output_dir}"
    html_css_header="<link rel=\"stylesheet\" href=\"heatmap.css\" />"
    html_js_header="<script src=\"heatmap.js\"> </script>"
fi


action "Generate ${output_format} pages"

if [ "${all_in_one}" == "yes" ]
then
    [ -z "${user_output_filename}" ] \
        && output_filename="${output_dir}/${output_prefix}all.$fileext" \
        || output_filename="${user_output_filename}"

    info "all in ${output_filename}"
	if [ "${output_format}" == "json" ]
	then
		git_to_json "$y" "$branches" "${svg_fill}" > "${output_filename}"
	else

        html_header "${title}" "${branches}" "${html_css_header}" "${html_js_header}" > "${output_filename}"
        html_color_legend                                                            >> "${output_filename}"
        for y in ${years//,/ }
        do
            html_heatmap_graph_header "${output_prefix}${y}"                         >> "${output_filename}"
            git_to_svg "$y" "$branches" "${svg_fill}"                                >> "${output_filename}"
            html_heatmap_graph_footer                                                >> "${output_filename}"
        done
        html_footer                                                                  >> "${output_filename}"
	fi

else
    for y in ${years//,/ }
    do
        output_filename="${output_dir}/${output_prefix}${y}.$fileext"
        info "${output_filename}"

	    if [ "${output_format}" == "json" ]
	    then
	        git_to_json "$y" "$branches" "${svg_fill}" > "${output_filename}"
		else
            html_header "${title}" "${branches}" \
                "${html_css_header}" "${html_js_header}"       > "${output_filename}"
            html_color_legend                                 >> "${output_filename}"
            html_heatmap_graph_header "${output_prefix}${y}"  >> "${output_filename}"
            git_to_svg "$y" "$branches"  "${svg_fill}"        >> "${output_filename}"
            html_heatmap_graph_footer                         >> "${output_filename}"
            html_footer                                       >> "${output_filename}"
		fi
    done
fi

