#!/usr/bin/bash

set -euo pipefail

usage () {
	cat <<EOF_USAGE
Usage: git localmirror [COMMAND|URL]

    If no parameter used   : list
    URL                    : git mirror url to $localdir

COMMANDS:

    help          : this help
    info          : display mirror infos
    list          : all local repos with remote url
                    --quiet list only local repo
                    --remotes list only remotes
    rm|del|delete : remove local repo defined in next parameter
                    parameter can be remote url or local repo name.
    update        : update all local mirror found in $localdir


EOF_USAGE
}


repo_info () {
    local repo
    local repodir

    repo="$1"
    repodir="$localdir"/"$repo"

    if ! git rev-parse --resolve-git-dir "$repodir" >/dev/null 2>&1 ; then
        printf -- "[-] error not a git repo %s" "$repodir"
        exit 1
    fi

	echo "fullpath: $(readlink -f $repodir)"
    echo "name: $repo"

    if [ -z "$(git --git-dir="$repodir" remotes 2>/dev/null)" ]; then
        echo "remotes: none"
    else
        echo "remotes:"
        git --git-dir="$repodir" remotes \
            |grep '(fetch)'\
            |sed \
                -e 's/\t/: /'\
                -e 's/ (fetch)//'\
            |awk '{print "  "$0}'
    fi
	git --git-dir="$repodir" branch --remotes
	echo "refs:"
	git --git-dir="$repodir" for-each-ref refs/heads  --format='  %(refname): %(subject)'
	echo "last commits:"
	git --git-dir="$repodir" log --oneline --pretty=format:'  - (%cr) <%an> %s' -10

}

repo_list () {
    local filter
    [ "$#" == "0" ] && filter="" || filter="$1"

    cd "$localdir"
    case "$filter" in
        --remotes)
            find . -type d -name "*.git" | xargs -I{} git --git-dir="{}" remote get-url origin
            ;;
        --quiet)
            find . -type d -name "*.git"
            ;;
        "")
            {
                for d in $(find . -type d -name "*.git"); do
                    printf -- "%s %s\n" "$d" "$(git --git-dir="$d" remote get-url origin)"
                done
            } |column -t
            ;;
        *)
            printf -- "[-] error, unknown list parameter %s\n" "$filter"
            usage
            exit 1
            ;;
    esac
}

sanitize_path () {
    local path="$1"
    path="${path//\.\.}"
    echo "$path"
}


repo_del () {
    local todel
    local repo
    local repodir
    todel="$1"
    repo=""

    if [ "$todel" != "$(sanitize_path "$todel")" ]; then
        printf -- "[-] SECURITY ALERT bad repo name (%s)\n" "$todel"
        exit 256
    fi

    if [ -d "$localdir"/"$todel" ]; then
        # User pass local repo name
        repo="$todel"
    else
        # User pass remote url
        # try to find repo
        repo=( $(repo_list|grep "$todel"|awk '{print $1}'||:) )
        if [ "${#repo[@]}" == "0" ]; then
            printf -- "[-] repo %s not found\n" "$todel"
            exit 1
        elif [ "${#repo[@]}" == "1" ]; then
            repo="$repo"
        else
            printf -- "[*] To many results, select one in the list:\n\n"
            for d in "${repo[@]}"; do
                printf -- "  - %s\n" "$d"
            done
            exit 1
        fi
    fi

    echo "----------------------------------------------------------"
    echo " DELETE REPO"
    echo "----------------------------------------------------------"
    echo
    repo_info "$repo"

    rep="n"
    read -p "Are you sure  (y/N) ?:" rep

    case "$rep" in
        o|O|y|Y)
            repodir="$(readlink -f "$localdir"/"$repo")"
            if [ -z "$(git --git-dir="$repodir" remotes)" ]; then
                echo ""
                echo " ===== WARNING =================="
                echo ""
                echo "  The repo has no remote, you will lost ALL the code."
                echo ""
                rep="n"
                read -p "Are you REALY sure (y/N) ?:" rep
                case "$rep" in
                    o|O|y|Y) : ;;
                    *) exit 0
                esac
            fi

            printf -- "[+] Delete repo %s..." "$repo"
			/bin/rm -rf "$repodir"

            ;;
        n|N|"")
            printf -- "[*] abort\n"
            exit 0
            ;;
        *)
            printf -- "[-] error unknown value (%s)\n" "$rep"
            exit 1
            ;;
    esac
}
# ----------------------------------------------------------------------------
#  main
# ----------------------------------------------------------------------------

localdir="$(readlink -f "$HOME"/repositories/Public)"

if [ "$#" == 0 ]; then
    url="list"
else
    url="$1"
fi

case "$url" in
    "--help"|"-h"|"help")
		usage
		exit 0
		;;
	"list")
        if [ "$#" -le "1" ]; then
            repo_list
        else
            repo_list "$2"
        fi
		exit $?
		;;
	"info")
		echo "local mirror dir: $localdir"
		cd "$localdir"
		echo "nb repos: $(find . -type d -name "*.git" | wc -l)"

		latest="$(ls -t $(find . -name last-modified ) |head -1||:)"
		oldest="$(ls -tr $(find . -name last-modified )|head -1||:)"
		echo "last   update: $(stat -L -c '%y' "$latest"|sed 's/\..*//') ($(git --git-dir="${latest%%/info/web/last-modified}" remote get-url origin))"
		echo "oldest update: $(stat -L -c '%y' "$oldest"|sed 's/\..*//') ($(git --git-dir="${oldest%%/info/web/last-modified}" remote get-url origin))"

		echo "remotes:"
		for r in $(ls -1d *); do
			echo "  ${r/.}: $(find "$r" -type d -name "*.git" | wc -l)"
		done

		exit $?
		;;
    "rm"|"del"|"delete")
        if [ "$#" -lt "2" ]; then
            printf -- "[-] error, %s needs parameter\n" "$url"
            usage
            exit 1
        fi
        repo_del "$2"
        exit $?
		;;
	"themes")
	    cd "$localdir"
	    ls -1 | grep -vE '\.git|^\.$'
	    exit $?
		;;
	"update")
	    cd "$localdir"
		for d in $(find . -type d -name '*.git'); do
			printf -- "[*] updating %s : " "$d"
			( cd "$d" && git remote get-url origin && "$0" "$(git remote get-url origin)" )
		done
		exit $?
		;;
esac


if [ "$#" == "2" ];
then
    subdir="$localdir"/"$2"/"$(dirname "${url#*://}")"
else
    subdir="$localdir"/"$(dirname "${url#*://}")"
fi

reponame="${url##*/}"
localrepodir="$subdir"/"${reponame//.git}".git

[ -d "$subdir" ] || mkdir -p "$subdir"

if [ -d "$localrepodir" ]; then
	git --git-dir="$localrepodir" fetch origin
else
	git clone --mirror "$url" "$localrepodir"
fi

cd "$localrepodir"
# Update Description file in repo
lastcommitref="$(git for-each-ref --sort=-authordate --count=1 --format='%(refname)')"
git log --abbrev-commit --pretty=format:"%s" "$lastcommitref" -1 > "$localrepodir"/description
echo " - Cloned from : $url" >> "$localrepodir"/description

#
# Update agefile for cgit
#
agefile="$(git rev-parse --git-dir)"/info/web/last-modified
mkdir -p "$(dirname "$agefile")" &&
git for-each-ref \
        --sort=-authordate --count=1 \
        --format='%(authordate:iso8601)' \
        >"$agefile"
