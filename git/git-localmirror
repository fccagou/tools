#!/usr/bin/bash

set -euo pipefail

usage () {
	cat <<EOF_USAGE
Usage: git localmirror [COMMAND|URL]

    If no parameter used   : list
    URL                    : git mirror url to $localdir

COMMANDS:

    help          : this help
    info          : display mirror infos
    list          : all local repos with remote url
                    --quiet list only local repo
                    --remotes list only remotes
    update        : update all local mirror found in $localdir


EOF_USAGE
}



repo_list () {
    local filter
    [ "$#" == "0" ] && filter="" || filter="$1"

    cd "$localdir"
    case "$filter" in
        --remotes)
            find . -type d -name "*.git" | xargs -I{} git --git-dir="{}" remote get-url origin
            ;;
        --quiet)
            find . -type d -name "*.git"
            ;;
        "")
            {
                for d in $(find . -type d -name "*.git"); do
                    printf -- "%s %s\n" "$d" "$(git --git-dir="$d" remote get-url origin)"
                done
            } |column -t
            ;;
        *)
            printf -- "[-] error, unknown list parameter %s\n" "$filter"
            usage
            exit 1
            ;;
    esac
}

# ----------------------------------------------------------------------------
#  main
# ----------------------------------------------------------------------------

localdir="$HOME"/repositories/Public

if [ "$#" == 0 ]; then
    url="list"
else
    url="$1"
fi

case "$url" in
    "--help"|"-h"|"help")
		usage
		exit 0
		;;
	"list")
        if [ "$#" == "1" ]; then
            repo_list
        else
            repo_list "$2"
        fi
		exit $?
		;;
	"info")
		echo "local mirror dir: $localdir"
		cd "$localdir"
		echo "nb repos: $(find . -type d -name "*.git" | wc -l)"

		latest="$(ls -t $(find . -name last-modified ) |head -1||:)"
		oldest="$(ls -tr $(find . -name last-modified )|head -1||:)"
		echo "last   update: $(stat -L -c '%y' "$latest"|sed 's/\..*//') ($(git --git-dir="${latest%%/info/web/last-modified}" remote get-url origin))"
		echo "oldest update: $(stat -L -c '%y' "$oldest"|sed 's/\..*//') ($(git --git-dir="${oldest%%/info/web/last-modified}" remote get-url origin))"

		echo "remotes:"
		for r in $(ls -1d *); do
			echo "  ${r/.}: $(find "$r" -type d -name "*.git" | wc -l)"
		done

		exit $?
		;;
	"themes")
	    cd "$localdir"
	    ls -1 | grep -vE '\.git|^\.$'
	    exit $?
		;;
	"update")
	    cd "$localdir"
		for d in $(find . -type d -name '*.git'); do
			printf -- "[*] updating %s : " "$d"
			( cd "$d" && git remote get-url origin && "$0" "$(git remote get-url origin)" )
		done
		exit $?
		;;
esac


if [ "$#" == "2" ];
then
    subdir="$localdir"/"$2"/"$(dirname "${url#*://}")"
else
    subdir="$localdir"/"$(dirname "${url#*://}")"
fi

reponame="${url##*/}"
localrepodir="$subdir"/"${reponame//.git}".git

[ -d "$subdir" ] || mkdir -p "$subdir"

if [ -d "$localrepodir" ]; then
	git --git-dir="$localrepodir" fetch origin
else
	git clone --mirror "$url" "$localrepodir"
fi

cd "$localrepodir"
# Update Description file in repo
lastcommitref="$(git for-each-ref --sort=-authordate --count=1 --format='%(refname)')"
git log --abbrev-commit --pretty=format:"%s" "$lastcommitref" -1 > "$localrepodir"/description
echo " - Cloned from : $url" >> "$localrepodir"/description

#
# Update agefile for cgit
#
agefile="$(git rev-parse --git-dir)"/info/web/last-modified
mkdir -p "$(dirname "$agefile")" &&
git for-each-ref \
        --sort=-authordate --count=1 \
        --format='%(authordate:iso8601)' \
        >"$agefile"
