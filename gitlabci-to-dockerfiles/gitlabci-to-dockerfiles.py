#!/usr/bin/env python3
import os
import yaml

#
# The script was initially generated by openai.
# It did not work, some fix and enhancement are done.
#

def parse_gitlab_ci(file_path):
    """Parse the .gitlab-ci.yml file and return its contents."""
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)

def generate_dockerfile(stage_name, job_name, job_info):
    """Generate a Dockerfile based on the stage's configuration."""
    dockerfile_lines = [
        "# ------------------------------------------------------------------------",
        "# Dockerfile generated from .gitlabci.yaml using gitlabci_to-dockerfiles.py",
        "#",
        f"#     {job_name}",
        "".join(("#      ", yaml.dump(job_info).replace("\n", "\n#      "))),
        "# ------------------------------------------------------------------------",
        "#",
        f"FROM {job_info['image']} AS builder",
        "",
        "WORKDIR /build",
        "COPY . .",
        "# Install dependencies if necessary",
    ]

    # Add before_script commands if present
    if 'before_script' in job_info:
        dockerfile_lines.append("# Before script:")
        dockerfile_lines.append("RUN <<EOF_BEFORE_SCRIPT")
        dockerfile_lines.append("set -euxo pipefail")
        dockerfile_lines.append(f"{job_info['before_script']}")
        dockerfile_lines.append("EOF_BEFORE_SCRIPT")

    # Add script commands (the main commands for the stage)
    dockerfile_lines.append("# Main script:")
    dockerfile_lines.append("RUN <<EOF_SCRIPT")
    dockerfile_lines.append("set -euxo pipefail")

    for command in job_info.get('script', []):
        dockerfile_lines.append(f"{command}")
    dockerfile_lines.append("EOF_SCRIPT")

    # Add after_script commands if present
    if 'after_script' in job_info:
        dockerfile_lines.append("# After script:")
        dockerfile_lines.append("RUN <<EOF_AFTER_SCRIPT")
        dockerfile_lines.append("set -euxo pipefail")
        dockerfile_lines.append(f"{job_info['after_script']}")
        dockerfile_lines.append("EOF_AFTER_SCRIPT")

    # Handle services (e.g., databases) if necessary
    if 'services' in job_info:
        dockerfile_lines.append("# Services:")
        for service in job_info['services']:
            dockerfile_lines.append(f"RUN docker-compose up -d {service}")

    if "artifacts" in job_info:
        if "paths" in job_info["artifacts"]:
            dockerfile_lines.append("# Copy artefects:")
            dockerfile_lines.append("RUN <<EOF_ARTEFACTS")
            dockerfile_lines.append("set -euxo pipefail")
            dockerfile_lines.append("mkdir /artefacts")
            for p in job_info["artifacts"]["paths"]:
                if not p.startswith("/"):
                    p = os.path.join("/build", p)
                dockerfile_lines.append(f"cp -a '{p}' /artefacts")

            dockerfile_lines.append("EOF_ARTEFACTS")


    return "\n".join(dockerfile_lines)

def create_dockerfiles_for_all_stages(ci_data):
    """Create Dockerfiles for all stages defined in the .gitlab-ci.yml."""
    dockerfiles = {}


    for stage_name in ci_data['stages']:
        for job_name in ci_data:
            if "stage" in ci_data[job_name] and ci_data[job_name]["stage"] == stage_name:
                dockerfile = generate_dockerfile(stage_name, job_name, ci_data[job_name])
                dockerfiles[f"{stage_name}_{job_name}"] = dockerfile

    return dockerfiles

def save_dockerfiles(dockerfiles):
    """Save Dockerfiles to individual files."""
    for stage, dockerfile in dockerfiles.items():
        _filename = f"Dockerfile_{stage}"
        print(f"[+] {_filename}")
        with open(_filename, 'w') as file:
            file.write(dockerfile)

if __name__ == "__main__":

    # Path to your .gitlab-ci.yml file
    gitlab_ci_file = '.gitlab-ci.yml'

    print("[*] Creating docker files from {gitlab_ci_file}")

    # Parse the .gitlab-ci.yml file
    ci_data = parse_gitlab_ci(gitlab_ci_file)

    # Generate Dockerfiles for each stage
    dockerfiles = create_dockerfiles_for_all_stages(ci_data)

    # Save Dockerfiles
    save_dockerfiles(dockerfiles)

    print("[*] Dockerfiles have been generated and saved.")
